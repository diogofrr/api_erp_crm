// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  name          String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile       Profile?
  authTokens    AuthToken[]
  roles         Role[]
  permissions   Permission[]
  Event Event[]
  EventTicket EventTicket[]
  EventOrganizer EventOrganizer[]
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  avatar      String?
  phone       String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AuthToken {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  tokenHash   String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  users       User[]
  permissions Permission[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Permission {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  users       User[]
  roles       Role[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Event {
  id             String    @id @default(uuid())
  name           String
  status         EventStatus
  description    String?
  date           DateTime
  location       String
  price          Float
  totalTickets   Int
  createdById    String
  createdBy      User      @relation(fields: [createdById], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  EventTicket    EventTicket[]
  EventOrganizer EventOrganizer[]
}


model EventOrganizer {
  id          String    @id @default(uuid())
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model EventTicket {
  eventId     String
  ticketId    String
  userId      String
  event       Event     @relation(fields: [eventId], references: [id])
  ticket      Ticket    @relation(fields: [ticketId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  qrCode      String    @unique
  status      TicketStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([eventId, ticketId, userId])
}

model Ticket {
  id          String    @id @default(uuid())
  fullName    String
  email       String
  phone       String
  birthDate   DateTime
  cpf         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  EventTicket EventTicket[]
}

enum EventStatus {
  PENDING
  ACTIVE
  CANCELLED
  COMPLETED
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
