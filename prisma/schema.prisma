generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String
  name           String
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  authTokens     AuthToken[]
  Event          Event[]
  EventOrganizer EventOrganizer[]
  EventTicket    EventTicket[]
  profile        Profile?
  permissions    Permission[]     @relation("PermissionToUser")
  roles          Role[]           @relation("RoleToUser")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  avatar    String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model AuthToken {
  id        String   @id @default(uuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")
  users       User[]   @relation("PermissionToUser")
}

model Event {
  id             String           @id @default(uuid())
  name           String
  status         EventStatus
  description    String?
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  location       String
  price          Float
  totalTickets   Int
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      User             @relation(fields: [createdById], references: [id])
  EventOrganizer EventOrganizer[]
  EventTicket    EventTicket[]
}

model EventOrganizer {
  id      String @id @default(uuid())
  eventId String
  userId  String
  event   Event  @relation(fields: [eventId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model EventTicket {
  eventId   String
  ticketId  String
  userId    String
  qrCode    String       @unique
  status    TicketStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  event     Event        @relation(fields: [eventId], references: [id])
  ticket    Ticket       @relation(fields: [ticketId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@id([eventId, ticketId, userId])
}

model Ticket {
  id          String        @id @default(uuid())
  fullName    String
  email       String
  phone       String
  birthDate   DateTime
  cpf         String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  EventTicket EventTicket[]
}

enum EventStatus {
  PENDING
  ACTIVE
  CANCELED
  COMPLETED
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELED
}
