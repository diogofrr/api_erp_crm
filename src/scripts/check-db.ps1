# Script para verificar status do banco de dados
Write-Host "üîç Verificando status do banco de dados..." -ForegroundColor Green

# Verificar se o Prisma est√° instalado
if (-not (Get-Command "npx" -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Node.js/npx n√£o encontrado. Instale o Node.js primeiro." -ForegroundColor Red
    exit 1
}

try {
    Write-Host "üì¶ Gerando cliente Prisma..." -ForegroundColor Yellow
    npx prisma generate

    Write-Host "üóÑÔ∏è Verificando status das migra√ß√µes..." -ForegroundColor Yellow
    npx prisma migrate status

    Write-Host ""
    Write-Host "üîç Verificando conex√£o com o banco..." -ForegroundColor Yellow

    # Criar script de verifica√ß√£o
    $checkScript = @"
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log('üîç Verificando conex√£o com o banco...');

    // Testar conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com o banco estabelecida');

    // Verificar se as tabelas existem
    console.log('üìã Verificando tabelas...');

    try {
      const userCount = await prisma.user.count();
      console.log('‚úÖ Tabela User existe (' + userCount + ' usu√°rios)');
    } catch (error) {
      console.log('‚ùå Tabela User n√£o existe ou n√£o est√° acess√≠vel');
    }

    try {
      const roleCount = await prisma.role.count();
      console.log('‚úÖ Tabela Role existe (' + roleCount + ' roles)');
    } catch (error) {
      console.log('‚ùå Tabela Role n√£o existe ou n√£o est√° acess√≠vel');
    }

    try {
      const eventCount = await prisma.event.count();
      console.log('‚úÖ Tabela Event existe (' + eventCount + ' eventos)');
    } catch (error) {
      console.log('‚ùå Tabela Event n√£o existe ou n√£o est√° acess√≠vel');
    }

    try {
      const ticketCount = await prisma.ticket.count();
      console.log('‚úÖ Tabela Ticket existe (' + ticketCount + ' ingressos)');
    } catch (error) {
      console.log('‚ùå Tabela Ticket n√£o existe ou n√£o est√° acess√≠vel');
    }

    console.log('');
    console.log('üìä Resumo:');
    console.log('- Se todas as tabelas existem: Banco est√° pronto');
    console.log('- Se alguma tabela n√£o existe: Execute as migra√ß√µes');
    console.log('- Se h√° erro de conex√£o: Verifique DATABASE_URL');

  } catch (error) {
    console.error('‚ùå Erro ao verificar banco:', error.message);
    console.log('');
    console.log('üîß Poss√≠veis solu√ß√µes:');
    console.log('1. Verifique se a vari√°vel DATABASE_URL est√° configurada');
    console.log('2. Verifique se o banco de dados est√° rodando');
    console.log('3. Verifique se as credenciais est√£o corretas');
    console.log('4. Execute: npm run db:migrate');
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();
"@

    # Salvar script tempor√°rio
    $checkScript | Out-File -FilePath "temp-check-db.js" -Encoding UTF8

    # Executar script
    node temp-check-db.js

    # Limpar arquivo tempor√°rio
    Remove-Item "temp-check-db.js" -ErrorAction SilentlyContinue

} catch {
    Write-Host "‚ùå Erro ao verificar banco: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
